Timer unit: 1e-06 s

Total time: 0.415681 s
File: /export/home1/users/bssn/serna/GitIBENS/Nanorods/sptrack/Classifying NRs/msd.py
Function: testfunction2 at line 96

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    96                                           def testfunction2(dataL):
    97         1          4.0      4.0      0.0      iNR = 0
    98                                           
    99         3          9.0      3.0      0.0      for idat,data in enumerate(dataL):
   100         2          7.0      3.5      0.0          tmax = data[0][1].shape[0]
   101                                           
   102         2         47.0     23.5      0.0          t = arange(tmax)
   103         2         18.0      9.0      0.0          counter = zeros(8)
   104         2          3.0      1.5      0.0          k = 0
   105        10         24.0      2.4      0.0          for i in range(len(data)):
   106         8         16.0      2.0      0.0              d = data[i]
   107         8         16.0      2.0      0.0              ni,yt,ey2,cnt = d
   108                                           
   109         8        897.0    112.1      0.2              xtt = t*10.0e-3
   110         8        103.0     12.9      0.0              ytt = yt*.325**2
   111                                           
   112         8        107.0     13.4      0.0              dto =  log(tmax)/200
   113         8        852.0    106.5      0.2              tml = log(t[1:])
   114         8         52.0      6.5      0.0              ntl = int(tml[-1]/dto)+1
   115         8         27.0      3.4      0.0              t0l = 0
   116         8        127.0     15.9      0.0              dd = zeros((ntl,2))-1
   117         8         90.0     11.2      0.0              dd[0,:2] = (t[1],ytt[1])
   118      1600       3457.0      2.2      0.8              for il in arange(1,ntl):
   119      1592       3573.0      2.2      0.9                  til = t0l+dto
   120      1592      28210.0     17.7      6.8                  sel = (tml>=t0l)*(tml<til)
   121      1592      28648.0     18.0      6.9                  if sel.sum()>0:
   122      1144       7818.0      6.8      1.9                      xe = xtt[1:][sel]
   123      1144       5554.0      4.9      1.3                      ye = ytt[1:][sel]
   124      1144      71193.0     62.2     17.1                      dd[il,:2] = [xe.mean(),ye.mean()]
   125      1592       3673.0      2.3      0.9                  t0l = til
   126                                           
   127         8        220.0     27.5      0.1              dde = dd[dd[:,0]>0,:]
   128         8         27.0      3.4      0.0              dde = dde[1:,:]
   129                                           
   130         8         18.0      2.2      0.0              if idat == 0 and i ==0:
   131         1         67.0     67.0      0.0                  xde = column_stack((dde,dde[:,:1]*0+i,dde[:,:1]*0+idat))
   132         1         65.0     65.0      0.0                  xden = column_stack((dde[:,:1],(dde[:,1:2]-dde[0,1])/(dde[-1,1]-dde[0,1]),dde[:,:1]*0+i,dde[:,:1]*0+idat))
   133                                                       else:
   134         7        530.0     75.7      0.1                  xde = row_stack((xde,column_stack((dde,dde[:,:1]*0+i,dde[:,:1]*0+idat))))
   135         7        600.0     85.7      0.1                  xden = row_stack((xden,column_stack((dde[:,:1],(dde[:,1:2]-dde[0,1])/(dde[-1,1]-dde[0,1]),dde[:,:1]*0+i,dde[:,:1]*0+idat))))
   136                                           
   137         8         31.0      3.9      0.0              ntle = dde.shape[0]
   138         8         14.0      1.8      0.0              nwin = 50
   139         8         43.0      5.4      0.0              ds = zeros((ntle+nwin-3,3))
   140      1528       3357.0      2.2      0.8              for il in range(ntle+nwin-3):
   141      1520       9007.0      5.9      2.2                  sel = arange(il-nwin+3,il+3)
   142      1520      18935.0     12.5      4.6                  sel = sel[(sel>=0)*(sel<ntle)]
   143      1520      12173.0      8.0      2.9                  xe = dde[sel,0]
   144      1520       8766.0      5.8      2.1                  ye = dde[sel,1]    
   145      1520     147725.0     97.2     35.5                  lm = linregress2(xe,ye)
   146      1520      46896.0     30.9     11.3                  ds[il,0] = xe.mean()    
   147      1520      11123.0      7.3      2.7                  ds[il,1:3] = (lm[0],lm[1])    
   148                                           
   149                                           
   150         8         17.0      2.1      0.0              if idat == 0 and i ==0:
   151         1         62.0     62.0      0.0                  xds = column_stack((ds,ds[:,:1]*0+i,ds[:,:1]*0+idat))
   152                                                       else:
   153         7       1434.0    204.9      0.3                  xds = row_stack((xds,column_stack((ds,ds[:,:1]*0+i,ds[:,:1]*0+idat))))
   154                                                       
   155         8         21.0      2.6      0.0              iNR +=1
   156                                                   #print(idat)
   157                                           
   158         1         10.0     10.0      0.0      xds = array(xds)
   159         1          7.0      7.0      0.0      xde = array(xde)
   160         1          6.0      6.0      0.0      xden = array(xden)
   161         1          2.0      2.0      0.0      return((xds,xde,xden))