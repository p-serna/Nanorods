from numpy import *
from matplotlib.pylab import *
import os
from scipy import signal
#from core_libs import *
from scipy.fftpack import fft
import scipy.optimize as opt
import cythLocalization as loc
import time

#%matplotlib inline

        
dirs = ["./moviefull/"]

for dirt in dirs:
    basedir = dirt
    files = os.listdir(basedir)

    dfiles = []
    for f in files:
        if f[:5]=='roi_s': dfiles.append(basedir+f)

    arrays = {}
    namesf = []
    namesm = []
    
def fitGaus(roi):
    #print(roi[0])
    ar = int(roi[-2])
    mmax = roi[ar]
    mmin = roi[int(roi[-1])]

    arx = float(ar%5)
    ary = float(ar//5)
    #      Amplitude, sx, sy, angle, bg, x, y
    seed2 = (mmax-mmin,1.5,1.5,0.1,mmin,arx,ary)                 
    y = x = reshape(arange(0,25)%5,(5,5))
    try:
        popt, pcov = opt.curve_fit(twoD_Gaussian, (x, y), roi[:25], p0=seed2, \
        bounds=(array([0,0.3,0.3,0,0,0,0]),array([10000/5e-3,2,2,2*pi,5000/5e-3,5,5])))
        popt = concatenate((popt,[0]))

    except:
        popt = concatenate((seed,[1]))    
    return(popt) 
    
# popts = list(map(fitGaus,transpose(testm)))

def bruteforce(testm):
    popts = zeros((8,12000))
    arga = argmax(testm,axis=0)
    argi = argmin(testm,axis=0)
    for j,k in enumerate(arange(testm.shape[1])[:12000]):
        temp = testm[:,k]
        try:
            mmax = temp[arga[k]]
            mmin = temp[argi[k]]

            ar = arga[k]
            arx = float(ar%5)
            ary = float(ar//5)
            #      Amplitude, sx, sy, angle, bg, x, y
            seed2 = (mmax-mmin,1.5,1.5,0.1,mmin,arx,ary)                 
            popt, pcov = opt.curve_fit(twoD_Gaussian, (x, y), temp, p0=seed2, \
            bounds=(array([0,0.3,0.3,0,0,0,0]),array([10000/5e-3,2,2,2*pi,5000/5e-3,5,5])))
            popts[:7,j] = popt
        except:
            popts[:7,j] = seed2
            popts[-1,j] = 1
    return(popts)
                               
def twoD_Gaussian(xdata, amplitude = 1.0, sx = 1.0, sy= 1.0, theta = 0.0, offset= 0.0, x0 = 0.0, y0 = 0.0, ):
    x, y = xdata
    x0 = x0
    y0 = y0    
    a = (cos(theta)**2)/(2*sx**2) + (sin(theta)**2)/(2*sy**2)
    b = -(sin(2*theta))/(4*sx**2) + (sin(2*theta))/(4*sy**2)
    c = (sin(theta)**2)/(2*sx**2) + (cos(theta)**2)/(2*sy**2)
    g = offset + amplitude*exp( - (a*((x-x0)**2) + 2*b*(x-x0)*(y-y0) 
                            + c*((y-y0)**2)))
    return g.ravel()
    

matidx = reshape(arange(25),(5,5))
dfiles.sort()

# ~ for filepath in dfiles:
    # ~ namesp = (filepath.split(sep=".")[1]).split(sep="/")[-1]
    # ~ rois = load(filepath)
    # ~ sh = shape(rois)
    # ~ if len(sh)>2 :
        # ~ print("This is a different one: "+filepath)
    # ~ rois = reshape(rois,(1,sh[0],sh[1]))

    # ~ for i in range(rois.shape[0]):
        # ~ testm = transpose(rois[i,:,:])/0.005
        # ~ meantestm = mean(testm,axis=-1).flatten()
        # ~ mmax = max(meantestm)
        # ~ mmin = min(meantestm)

        # ~ x = arange(0, 5)
        # ~ y = arange(0, 5)
        # ~ x, y = meshgrid(x, y)
         
        # ~ ar = argmax(meantestm)
        # ~ arx = float(ar%5)
        # ~ ary = float(ar//5)

        # ~ #      Amplitude, sx, sy, angle, bg, x, y
        # ~ seed = (mmax-mmin,1.5,1.5,0.1,mmin,arx,ary)

        # ~ data = meantestm


        # ~ try: 
            # ~ popt, pcov = opt.curve_fit(twoD_Gaussian, (x, y), data, p0=seed, \
                # ~ bounds=(array([0,0,0,0,0,0,0]),array([10000/0.005,4,4,2*pi,5000/0.005,5,5])))
            ##fig, ax = subplots(1, 1)
            ##ax.hold(True)
            ## ~ xs = linspace(0,5,5)
            ## ~ ys = linspace(0,5,5)
            ## ~ imshow(data.reshape(5, 5), cmap=plt.cm.viridis, origin='bottom',
            #    # ~ extent=(xs.min(), xs.max(), ys.min(), ys.max()))
            ## ~ colorbar()
            ## ~ xx = linspace(0, 5,201)
            ## ~ yy = linspace(0, 5,201)
            ## ~ xx, yy = meshgrid(xx, yy)
            ## ~ popt2 = popt
            ## ~ popt2[:,5:6] =popt2[:,5:6] +1 
            ## ~ prediction = twoD_Gaussian((xx, yy), *popt2)  
            ## ~ contour(xx, yy, prediction.reshape(201, 201), 8, colors='w')
            ## ~ title('''$\sigma_x,\sigma_y =$ %.2f, %.2f; bg = %.2f; A = %.2f\t x,y = %.1f,%.1f
            ## ~ ''' % (popt2[1],popt2[2],popt2[4],popt2[0],popt2[5],popt2[6]))
            ## ~ savefig("ROI_"+namesp[1:9]+namesp[-4:]+"_"+str(i).zfill(2)+".png")
            ## ~ close()

        # ~ except:
            # ~ print("Error in averaged fit:"+filepath)
            # ~ pass    
            
          
def visualization(imA,contrastd=1.0,contrastu=2.5,figname=""):
    fig = figure(figname,figsize = (7,4.5))
    ax = fig.add_subplot(111)
    imt = imA*1.0; me = mean(imt.flatten()); sd = std(imt.flatten());
    imt[imt>me+contrastu*sd] = me+contrastu*sd; imt[imt<me-contrastd*sd] = me-contrastd*sd;
    ax.imshow(imt,cmap='gray')
    axis('off')
    subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, 
            hspace = 0, wspace = 0)
    margins(0,0)
    gca().xaxis.set_major_locator(NullLocator())
    gca().yaxis.set_major_locator(NullLocator())

    return((fig,ax))
         
print(dfiles)

for filepath in dfiles:
    print("Starting with "+filepath)
    namesp = (filepath.split(sep=".")[1]).split(sep="/")[-1]
    rois = load(filepath)
    sh = shape(rois)
    if len(sh)>2 :
        print("This is a different one: "+filepath)
    rois = reshape(rois,(1,sh[0],sh[1]))


    for i in range(rois.shape[0]):
        starttime = time.time()
        testm = transpose(rois[i,:,:])/0.005

        arga = argmax(testm,axis=0)
        argi = argmin(testm,axis=0)
        
        testm2 = transpose(row_stack((testm,arga,argi)))
        popts = array(loc.fitvideoP(testm2))            
        endtime = time.time()
        print("It took ",endtime-starttime,"seconds")
        save("sptrack/pot2_"+namesp+"_"+str(i).zfill(2)+".npy",popts)
        
        #poptroi[i] = popts
    print("File "+filepath+" finished")


